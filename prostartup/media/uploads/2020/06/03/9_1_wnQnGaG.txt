namespace Lab_9._1
{
    abstract class Unit
    {
        //возвращает массив строк из 7 элементов, готовый для отправки в DataGridView
        virtual public string[] GetRow()
        {
            string mana = "";
            string[] strArray = { Name, $"{HealthPoints}", GroundAttack.ToString(), $"{ArmorPoints}", $"{AttackRange}", $"{Cost}", mana };
            return strArray;
        }
        //метода изменения характеристик
        public void ChangeStats(string hp, string arm, string man)
        {
            int tmp;
            if (int.TryParse(hp, out tmp))
                HealthPoints += tmp;
            if (int.TryParse(arm, out tmp))
                ArmorPoints += tmp;
            if (int.TryParse(man, out tmp))
                Mana += tmp;
        }
        protected string Name;
        protected _AttackPoints GroundAttack;
        protected int ArmorPoints;
        protected int HealthPoints
        {
            get { return _healthPoints; }
            set
            {
                if (value < 0)
                    _healthPoints = 0;
                else
                    _healthPoints = value;
            }
        }
        protected int AttackRange;
        protected int Cost;
        protected int Mana
        {
            get { return _mana; }
            set
            {
                if (value < 0)
                    _mana = 0;
                else
                    _mana = value;
            }
        }
        private int _mana;
        private int _healthPoints;
    public class _AttackPoints
    {
    public _AttackPoints(int left, int right)
    {
        if (left <= right)
        {
            Left = left;
            Right = right;
        }
        else
        {
            Left = right;
            Right = left;
        }
        }
        public int Left
        {
            get { return _left; }
            set
            {
                if (value >= 0)
                    _left = value;
                else
                    _left = 0;
            }
        }
        public int Right
        {
            get { return _right; }
            set
            {
                if (value >= 0)
                    _right = value;
                else
                    _right = 0;
            }
        }
        override public string ToString()
        {
            return $"{Left}-{Right}";
        }
        private int _left;
        private int _right;
        }
    }
    class TrollAxethrower : Unit
    {   
        public TrollAxethrower()
        {
            Name = "TrollAxethrower";
            HealthPoints = 90;
            GroundAttack = new _AttackPoints(2, 12);
            ArmorPoints = 4;
            AttackRange = 1;
            Cost = 800;
            Mana = 0;
        }
        public class TrollBerserker : TrollAxethrower
        {
            public TrollBerserker()
            {
                Name = "TrollBerserker";
                Mana = 250;
            }
            override public string[] GetRow()
            {
                string[] strArray = { Name, $"{HealthPoints}", GroundAttack.ToString(), $"{ArmorPoints}", $"{AttackRange}", $"{Cost}", $"{Mana}" };
                return strArray;
            }
        }
    }
    class Dragon : Unit
    {
        public Dragon()
        {
            Name = "Dragon";
            HealthPoints = 100;
            GroundAttack = new _AttackPoints(2, 35);
            ArmorPoints = 10;
            AttackRange = 4;
            Cost = 700;
            Mana = 0;
        }
    }
}


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Lab_9._1
{
public partial class Form1 : Form
{

public Form1()
{
InitializeComponent();
//заголовки и свойства таблицы DataGridView
Units_dataGridView.ColumnCount = 7;
Units_dataGridView.Columns[0].HeaderText = "";
Units_dataGridView.Columns[0].Width = 200;
Units_dataGridView.Columns[1].HeaderText = "HP";
Units_dataGridView.Columns[2].HeaderText = "Attack";
Units_dataGridView.Columns[3].HeaderText = "Armor";
Units_dataGridView.Columns[4].HeaderText = "Range";
Units_dataGridView.Columns[5].HeaderText = "Cost";
Units_dataGridView.Columns[6].HeaderText = "Mana";
Units_dataGridView.AllowUserToAddRows = false;
Units_dataGridView.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
Units_dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
upgrade_button.Visible = false;
}
//метод вызывается при изменении массивов "базы данных"
private void Reload_DataGrid()
{
Units_dataGridView.Rows.Clear();
for (int i = 0; i < unitsList.Count; ++i)
{
if (unitsList[i].Type == Database.UnitType.Dragon)

Units_dataGridView.Rows.Add(DragonList [unitsList[i].Index].GetRow());
else if (unitsList[i].Type == Database.UnitType.TrollAxethrower)
Units_dataGridView.Rows.Add(TrollAxethrowerList[unitsList[i].Index].GetRow());
else
Units_dataGridView.Rows.Add(TrollBerserkerList[unitsList[i].Index].GetRow());
}
health_textBox.Text = "0";
armor_textBox.Text = "0";
mana_textBox.Text = "0";
}
private List<TrollAxethrower> TrollAxethrowerList = new List<TrollAxethrower>();
private List<TrollAxethrower.TrollBerserker> TrollBerserkerList = new List<TrollAxethrower.TrollBerserker>();
private List<Dragon> DragonList = new List<Dragon>();
private List<Database> unitsList = new List<Database>();
private void addTrollAxethrower_Click(object sender, EventArgs e)
{
unitsList.Add(new Database(TrollAxethrowerList.Count, Database.UnitType.TrollAxethrower));
TrollAxethrowerList.Add(new TrollAxethrower());
Reload_DataGrid();

}

private void addDragon_Click(object sender, EventArgs e)
{
unitsList.Add(new Database(DragonList.Count, Database.UnitType.Dragon));
DragonList.Add(new Dragon());
Reload_DataGrid();
}

private void upgrade_button_Click(object sender, EventArgs e)
{
int rowIndex = Units_dataGridView.SelectedCells[0].RowIndex;
TrollAxethrowerList.RemoveAt(unitsList[rowIndex].Index);
for (int i = rowIndex; i < unitsList.Count; ++i)
{
if (unitsList[i].Type == Database.UnitType.TrollAxethrower)
unitsList[i].Index -= 1;
}
unitsList.RemoveAt(rowIndex);
unitsList.Add(new Database(TrollBerserkerList.Count, Database.UnitType.TrollBerserker));
TrollBerserkerList.Add(new TrollAxethrower.TrollBerserker());
Reload_DataGrid();
}
private void Change_button_Click(object sender, EventArgs e)
{
int rowIndex = Units_dataGridView.SelectedCells[0].RowIndex;
if (unitsList[rowIndex].Type == Database.UnitType.Dragon)
DragonList[unitsList[rowIndex].Index].ChangeStats(
health_textBox.Text, armor_textBox.Text, mana_textBox.Text);
else if (unitsList[rowIndex].Type == Database.UnitType.TrollAxethrower)
TrollAxethrowerList[unitsList[rowIndex].Index].ChangeStats(
health_textBox.Text, armor_textBox.Text, mana_textBox.Text);
else
TrollBerserkerList[unitsList[rowIndex].Index].ChangeStats(
health_textBox.Text, armor_textBox.Text, mana_textBox.Text);
Reload_DataGrid();
}

private void Units_dataGridView_SelectionChanged(object sender, EventArgs e)
{
if (Units_dataGridView.SelectedCells.Count != 0)
{
if (Units_dataGridView.SelectedCells[0].Value.ToString() == "TrollAxethrower")
{
upgrade_button.Visible = true;
}
else
{
upgrade_button.Visible = false;
}
}
}
}
}
 

Database

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab_9._1
{
class Database
{
public Database(int index, UnitType type)
{
Index = index;
Type = type;
}
public int Index;
public UnitType Type;
public enum UnitType
{
Dragon,
TrollAxethrower,
TrollBerserker
}

}
}